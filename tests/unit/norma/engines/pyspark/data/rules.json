[
  {
    "test": "required",
    "cases": [
      {
        "description": "column is not null",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "column is null, error is raised",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                {
                  "type": "missing",
                  "msg": "Field required"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "column is missing, error is raised",
        "given": {
          "data": [
            [
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                {
                  "type": "missing",
                  "msg": "Field required"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col",
                "type": "string"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "equal_to",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": "foo"
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'foo' == 'foo'",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": "foo"
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 == 1",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1.5 == 1.5",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 1.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "true == true",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": true
          }
        },
        "then": {
          "data": [
            {
              "col": true,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'foo' == 'bar', error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": "bar"
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                {
                  "type": "equal_to",
                  "msg": "Input should be equal to \"bar\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 == 2, error is raised",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": 2
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                {
                  "type": "equal_to",
                  "msg": "Input should be equal to 2"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1.5 == 2.5, error is raised",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": 2.5
          }
        },
        "then": {
          "data": [
            {
              "col": 1.5,
              "errors_col": [
                {
                  "type": "equal_to",
                  "msg": "Input should be equal to 2.5"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "true == false, error is raised",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "eq": false
          }
        },
        "then": {
          "data": [
            {
              "col": true,
              "errors_col": [
                {
                  "type": "equal_to",
                  "msg": "Input should be equal to false"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "not_equal_to",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": "bar"
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'foo' != 'bar'",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": "bar"
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 != 2",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": 2
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1.5 != 2.5",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": 2.5
          }
        },
        "then": {
          "data": [
            {
              "col": 1.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "true != false",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": false
          }
        },
        "then": {
          "data": [
            {
              "col": true,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'foo' != 'foo', error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": "foo"
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                {
                  "type": "not_equal_to",
                  "msg": "Input should not be equal to \"foo\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 != 1, error is raised",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                {
                  "type": "not_equal_to",
                  "msg": "Input should not be equal to 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1.5 != 1.5, error is raised",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 1.5,
              "errors_col": [
                {
                  "type": "not_equal_to",
                  "msg": "Input should not be equal to 1.5"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "true != true, error is raised",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ne": true
          }
        },
        "then": {
          "data": [
            {
              "col": true,
              "errors_col": [
                {
                  "type": "not_equal_to",
                  "msg": "Input should not be equal to true"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "greater_than",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "0 > 1, error is raised",
        "given": {
          "data": [
            [
              0,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 0,
              "errors_col": [
                {
                  "type": "greater_than",
                  "msg": "Input should be greater than 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 > 1, error is raised",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                {
                  "type": "greater_than",
                  "msg": "Input should be greater than 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2 > 1",
        "given": {
          "data": [
            [
              2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 2,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2.5 > 1.5",
        "given": {
          "data": [
            [
              2.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 2.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'c' > 'b'",
        "given": {
          "data": [
            [
              "c",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "c",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'a' > 'b', error is raised",
        "given": {
          "data": [
            [
              "a",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "a",
              "errors_col": [
                {
                  "type": "greater_than",
                  "msg": "Input should be greater than \"b\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "true > false",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "gt": false
          }
        },
        "then": {
          "data": [
            {
              "col": true,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "greater_than_equal",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": 1
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "0 >= 1, error is raised",
        "given": {
          "data": [
            [
              0,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 0,
              "errors_col": [
                {
                  "type": "greater_than_equal",
                  "msg": "Input should be greater than or equal to 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 >= 1",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2 >= 1",
        "given": {
          "data": [
            [
              2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 2,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1.5 >= 1.5",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 1.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2.5 >= 1.5",
        "given": {
          "data": [
            [
              2.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 2.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'a' >= 'b', error is raised",
        "given": {
          "data": [
            [
              "a",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "a",
              "errors_col": [
                {
                  "type": "greater_than_equal",
                  "msg": "Input should be greater than or equal to \"b\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'b' >= 'b'",
        "given": {
          "data": [
            [
              "b",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "b",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'c' >= 'b'",
        "given": {
          "data": [
            [
              "c",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "ge": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "c",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "less_than",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "0 < 1",
        "given": {
          "data": [
            [
              0,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 0,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "0.5 < 1.5",
        "given": {
          "data": [
            [
              0.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 0.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 < 1, error is raised",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                {
                  "type": "less_than",
                  "msg": "Input should be less than 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2 < 1, error is raised",
        "given": {
          "data": [
            [
              2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 2,
              "errors_col": [
                {
                  "type": "less_than",
                  "msg": "Input should be less than 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'a' < 'b'",
        "given": {
          "data": [
            [
              "a",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "a",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'c' < 'b', error is raised",
        "given": {
          "data": [
            [
              "c",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "c",
              "errors_col": [
                {
                  "type": "less_than",
                  "msg": "Input should be less than \"b\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "true < false, error is raised",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "lt": false
          }
        },
        "then": {
          "data": [
            {
              "col": true,
              "errors_col": [
                {
                  "type": "less_than",
                  "msg": "Input should be less than false"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "less_than_equal",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "0 <= 1",
        "given": {
          "data": [
            [
              0,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 0,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1 <= 1",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2 <= 1, error is raised",
        "given": {
          "data": [
            [
              2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1
          }
        },
        "then": {
          "data": [
            {
              "col": 2,
              "errors_col": [
                {
                  "type": "less_than_equal",
                  "msg": "Input should be less than or equal to 1"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "0.5 <= 1.5",
        "given": {
          "data": [
            [
              0.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 0.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "1.5 <= 1.5",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 1.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2.5 <= 1.5, error is raised",
        "given": {
          "data": [
            [
              2.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": 1.5
          }
        },
        "then": {
          "data": [
            {
              "col": 2.5,
              "errors_col": [
                {
                  "type": "less_than_equal",
                  "msg": "Input should be less than or equal to 1.5"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'a' <= 'b'",
        "given": {
          "data": [
            [
              "a",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "a",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'b' <= 'b'",
        "given": {
          "data": [
            [
              "b",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "b",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'c' <= 'b', error is raised",
        "given": {
          "data": [
            [
              "c",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "le": "b"
          }
        },
        "then": {
          "data": [
            {
              "col": "c",
              "errors_col": [
                {
                  "type": "less_than_equal",
                  "msg": "Input should be less than or equal to \"b\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "multiple_of",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 3
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "3 is multiple of 3",
        "given": {
          "data": [
            [
              3,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 3
          }
        },
        "then": {
          "data": [
            {
              "col": 3,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "2 is not multiple of 3, error is raised",
        "given": {
          "data": [
            [
              2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 3
          }
        },
        "then": {
          "data": [
            {
              "col": 2,
              "errors_col": [
                {
                  "type": "multiple_of",
                  "msg": "Input should be a multiple of 3"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "369 is multiple of 3",
        "given": {
          "data": [
            [
              369,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 3
          }
        },
        "then": {
          "data": [
            {
              "col": 369,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "7.5 is multiple of 2.5",
        "given": {
          "data": [
            [
              7.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 2.5
          }
        },
        "then": {
          "data": [
            {
              "col": 7.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "7.51 is not multiple of 2.5, error is raised",
        "given": {
          "data": [
            [
              7.51,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 2.5
          }
        },
        "then": {
          "data": [
            {
              "col": 7.51,
              "errors_col": [
                {
                  "type": "multiple_of",
                  "msg": "Input should be a multiple of 2.5"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'abc' is multiple of 3, exception is raised",
        "given": {
          "data": [
            [
              "abc",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": 3
          }
        },
        "then": {
          "raises": {
            "type": "ValueError",
            "match": "multiple_of rule can only be applied to numeric columns"
          }
        }
      },
      {
        "description": "6 is multiple of 'a', exception is raised",
        "given": {
          "data": [
            [
              6,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "multiple": "a"
          }
        },
        "then": {
          "raises": {
            "type": "ValueError",
            "match": "multiple_of must be an integer or a float"
          }
        }
      }
    ]
  },
  {
    "test": "min_length",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "len('ab') <= 3, error is raised",
        "given": {
          "data": [
            [
              "ab",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": "ab",
              "errors_col": [
                {
                  "type": "string_too_short",
                  "msg": "String should have at least 3 characters"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "len('abc') <= 3",
        "given": {
          "data": [
            [
              "abc",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": "abc",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "len('abcd') <= 3",
        "given": {
          "data": [
            [
              "abcd",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": "abcd",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "max_length",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "len('ab') <= 3",
        "given": {
          "data": [
            [
              "ab",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": "ab",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "len('abc') <= 3",
        "given": {
          "data": [
            [
              "abc",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": "abc",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "len('abcd') <= 3, error is raised",
        "given": {
          "data": [
            [
              "abcd",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "value": 3
          }
        },
        "then": {
          "data": [
            {
              "col": "abcd",
              "errors_col": [
                {
                  "type": "string_too_long",
                  "msg": "String should have at most 3 characters"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "pattern",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "regex": "[a-z]+"
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'abc' matches '[a-z]+'",
        "given": {
          "data": [
            [
              "abc",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "regex": "[a-z]+"
          }
        },
        "then": {
          "data": [
            {
              "col": "abc",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'abc' does not match '[0-9]+', error is raised",
        "given": {
          "data": [
            [
              "abc",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "regex": "[0-9]+"
          }
        },
        "then": {
          "data": [
            {
              "col": "abc",
              "errors_col": [
                {
                  "type": "string_pattern_mismatch",
                  "msg": "String should match pattern \"[0-9]+\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'123' does not match '[a-z]+', error is raised",
        "given": {
          "data": [
            [
              "123",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "regex": "[a-z]+"
          }
        },
        "then": {
          "data": [
            {
              "col": "123",
              "errors_col": [
                {
                  "type": "string_pattern_mismatch",
                  "msg": "String should match pattern \"[a-z]+\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'123' matches '[0-9]+'",
        "given": {
          "data": [
            [
              "123",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "regex": "[0-9]+"
          }
        },
        "then": {
          "data": [
            {
              "col": "123",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "isin",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'foo' is in ['foo', 'bar']",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'bar' is in ['foo', 'bar']",
        "given": {
          "data": [
            [
              "bar",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": "bar",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'baz' is not in ['foo', 'bar'], error is raised",
        "given": {
          "data": [
            [
              "baz",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": "baz",
              "errors_col": [
                {
                  "type": "enum",
                  "msg": "Input should be \"foo\" or \"bar\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "123 is in [123, 234]",
        "given": {
          "data": [
            [
              123,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              123,
              234
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": 123,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "999 is not in [123, 234], error is raised",
        "given": {
          "data": [
            [
              999,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              123,
              234
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": 999,
              "errors_col": [
                {
                  "type": "enum",
                  "msg": "Input should be 123 or 234"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "notin",
    "cases": [
      {
        "description": "column is null, ignored",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'foo' is in ['foo', 'bar'], error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                {
                  "type": "not_enum",
                  "msg": "Input should not be \"foo\" or \"bar\""
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "'baz' is not in ['foo', 'bar']",
        "given": {
          "data": [
            [
              "baz",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              "foo",
              "bar"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": "baz",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "123 is in [123, 234], error is raised",
        "given": {
          "data": [
            [
              123,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              123,
              234
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": 123,
              "errors_col": [
                {
                  "type": "not_enum",
                  "msg": "Input should not be 123 or 234"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "999 is not in [123, 234]",
        "given": {
          "data": [
            [
              999,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "values": [
              123,
              234
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": 999,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "extra_forbidden",
    "cases": [
      {
        "description": "column is allowed",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "allowed": [
              "col",
              "col2",
              "col3"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      },
      {
        "description": "column is forbidden, error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {
            "allowed": [
              "col2",
              "col3"
            ]
          }
        },
        "then": {
          "data": [
            {
              "col_bak": "foo",
              "errors_col": [
                {
                  "type": "extra_forbidden",
                  "msg": "Extra inputs are not permitted"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col_bak",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "int_parsing",
    "cases": [
      {
        "description": "cast(null as integer) => null",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "col_bak": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('1' as integer) => 1",
        "given": {
          "data": [
            [
              "1",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1,
              "col_bak": "1",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('1.2' as integer) => 1",
        "given": {
          "data": [
            [
              "1.2",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1,
              "col_bak": "1.2",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast(1 as integer) => 1",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1,
              "errors_col": []
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        }
      },
      {
        "description": "cast(1.2 as integer) => 1",
        "given": {
          "data": [
            [
              1.2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "double"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1,
              "col_bak": 1.2,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "double"
              }
            ]
          }
        }
      },
      {
        "description": "cast('foo' as integer) => null, error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "col_bak": "foo",
              "errors_col": [
                {
                  "type": "int_parsing",
                  "msg": "Input should be a valid integer, unable to parse string as an integer"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "float_parsing",
    "cases": [
      {
        "description": "cast(null as float) => null",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "col_bak": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('1' as float) => 1.0",
        "given": {
          "data": [
            [
              "1",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1.0,
              "col_bak": "1",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('1.2' as float) => 1.2",
        "given": {
          "data": [
            [
              "1.2",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1.2,
              "col_bak": "1.2",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast(1 as float) => 1.0",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1.0,
              "col_bak": 1,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "integer"
              }
            ]
          }
        }
      },
      {
        "description": "cast(1.2 as float) => 1.2",
        "given": {
          "data": [
            [
              1.2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "double"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": 1.2,
              "col_bak": 1.2,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "double"
              }
            ]
          }
        }
      },
      {
        "description": "cast('foo' as float) => null, error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "col_bak": "foo",
              "errors_col": [
                {
                  "type": "float_parsing",
                  "msg": "Input should be a valid number, unable to parse string as a number"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "float"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "bool_parsing",
    "cases": [
      {
        "description": "cast(null as boolean) => null",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "col_bak": null,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('true' as boolean) => true",
        "given": {
          "data": [
            [
              "true",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": "true",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('True' as boolean) => true",
        "given": {
          "data": [
            [
              "True",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": "True",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('t' as boolean) => true",
        "given": {
          "data": [
            [
              "t",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": "t",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('yes' as boolean) => true",
        "given": {
          "data": [
            [
              "yes",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": "yes",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('Y' as boolean) => true",
        "given": {
          "data": [
            [
              "Y",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": "Y",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('1' as boolean) => true",
        "given": {
          "data": [
            [
              "1",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": "1",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast(1 as boolean) => true",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": 1,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "integer"
              }
            ]
          }
        }
      },
      {
        "description": "cast(5 as boolean) => true",
        "given": {
          "data": [
            [
              5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": 5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "integer"
              }
            ]
          }
        }
      },
      {
        "description": "cast(1.5 as boolean) => true",
        "given": {
          "data": [
            [
              1.5,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "double"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": true,
              "col_bak": 1.5,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "double"
              }
            ]
          }
        }
      },
      {
        "description": "cast('false' as boolean) => false",
        "given": {
          "data": [
            [
              "false",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": "false",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('False' as boolean) => false",
        "given": {
          "data": [
            [
              "False",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": "False",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('f' as boolean) => false",
        "given": {
          "data": [
            [
              "f",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": "f",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('no' as boolean) => false",
        "given": {
          "data": [
            [
              "no",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": "no",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('N' as boolean) => false",
        "given": {
          "data": [
            [
              "N",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": "N",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast('0' as boolean) => false",
        "given": {
          "data": [
            [
              "0",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": "0",
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      },
      {
        "description": "cast(0 as boolean) => false",
        "given": {
          "data": [
            [
              0,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": false,
              "col_bak": 0,
              "errors_col": [
                null
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "integer"
              }
            ]
          }
        }
      },
      {
        "description": "cast('foo' as boolean) => null, error is raised",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "col_bak": "foo",
              "errors_col": [
                {
                  "type": "bool_parsing",
                  "msg": "Input should be a valid boolean, unable to interpret input"
                }
              ]
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": {
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "msg",
                        "type": "string"
                      }
                    ],
                    "type": "struct"
                  },
                  "containsNull": true
                }
              },
              {
                "name": "col_bak",
                "type": "string"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "test": "str_parsing",
    "cases": [
      {
        "description": "cast(null as string) => null",
        "given": {
          "data": [
            [
              null,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": null,
              "errors_col": []
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        }
      },
      {
        "description": "cast('foo' as string) => 'foo'",
        "given": {
          "data": [
            [
              "foo",
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": "foo",
              "errors_col": []
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        }
      },
      {
        "description": "cast(1 as string) => '1'",
        "given": {
          "data": [
            [
              1,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "integer"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": "1",
              "col_bak": 1,
              "errors_col": []
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              },
              {
                "name": "col_bak",
                "type": "integer"
              }
            ]
          }
        }
      },
      {
        "description": "cast(1.2 as string) => '1.2'",
        "given": {
          "data": [
            [
              1.2,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "double"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": "1.2",
              "col_bak": 1.2,
              "errors_col": []
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              },
              {
                "name": "col_bak",
                "type": "double"
              }
            ]
          }
        }
      },
      {
        "description": "cast(true as string) => 'true'",
        "given": {
          "data": [
            [
              true,
              []
            ]
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "boolean"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              }
            ]
          }
        },
        "when": {
          "args": {}
        },
        "then": {
          "data": [
            {
              "col": "true",
              "col_bak": true,
              "errors_col": []
            }
          ],
          "schema": {
            "fields": [
              {
                "name": "col",
                "type": "string"
              },
              {
                "name": "errors_col",
                "type": {
                  "type": "array",
                  "elementType": "void",
                  "containsNull": false
                }
              },
              {
                "name": "col_bak",
                "type": "boolean"
              }
            ]
          }
        }
      }
    ]
  }
]
