[
  {
    "test": "allow_extra",
    "cases": [
      {
        "description": "Extra fields are allowed",
        "engines": [
          "pandas",
          "pyspark"
        ],
        "given": {
          "data": [
            {
              "name": "John",
              "age": 30
            },
            {
              "name": "Nancy",
              "age": 25
            }
          ]
        },
        "when": {
          "json_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        },
        "then": {
          "data": [
            {
              "name": "John",
              "age": 30,
              "errors": {}
            },
            {
              "name": "Nancy",
              "age": 25,
              "errors": {}
            }
          ]
        }
      },
      {
        "description": "Extra fields forbidden",
        "engines": [
          "pandas",
          "pyspark"
        ],
        "given": {
          "data": [
            {
              "name": "John",
              "age": 30
            },
            {
              "name": "Nancy",
              "age": 25
            }
          ]
        },
        "when": {
          "json_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "then": {
          "data": [
            {
              "name": "John",
              "errors": {
                "age": {
                  "details": [
                    {
                      "type": "extra_forbidden",
                      "msg": "Extra inputs are not permitted"
                    }
                  ],
                  "original": "30"
                }
              }
            },
            {
              "name": "Nancy",
              "errors": {
                "age": {
                  "details": [
                    {
                      "type": "extra_forbidden",
                      "msg": "Extra inputs are not permitted"
                    }
                  ],
                  "original": "25"
                }
              }
            }
          ]
        }
      }
    ]
  },
  {
    "test": "default",
    "cases": [
      {
        "description": "Fill missing values with default",
        "engines": [
          "pandas",
          "pyspark"
        ],
        "given": {
          "data": [
            {
              "name": "John",
              "age": 30
            },
            {
              "name": "Nancy"
            }
          ]
        },
        "when": {
          "json_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "integer",
                "default": 25
              }
            }
          }
        },
        "then": {
          "data": [
            {
              "name": "John",
              "age": 30,
              "errors": {}
            },
            {
              "name": "Nancy",
              "age": 25,
              "errors": {}
            }
          ]
        }
      },
      {
        "description": "Fill invalid values with default",
        "engines": [
          "pandas",
          "pyspark"
        ],
        "given": {
          "data": [
            {
              "name": "John",
              "age": "30"
            },
            {
              "name": "Nancy",
              "age": "abc"
            }
          ]
        },
        "when": {
          "json_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "integer",
                "default": 25
              }
            }
          }
        },
        "then": {
          "data": [
            {
              "name": "John",
              "age": 30,
              "errors": {}
            },
            {
              "name": "Nancy",
              "age": 25,
              "errors": {
                "age": {
                  "details": [
                    {
                      "type": "int_parsing",
                      "msg": "Input should be a valid integer, unable to parse value as an integer"
                    }
                  ],
                  "original": "\"abc\""
                }
              }
            }
          ]
        }
      }
    ]
  },
  {
    "test": "default_factory",
    "cases": [
      {
        "description": "Fill missing values with value from another column",
        "engines": [
          "pandas"
        ],
        "given": {
          "data": [
            {
              "col1": "foo",
              "col2": "bar"
            },
            {
              "col1": null,
              "col2": "qux"
            },
            {
              "col1": "baz",
              "col2": null
            },
            {
              "col1": null,
              "col2": null
            }
          ]
        },
        "when": {
          "schema": {
            "columns": {
              "col1": {
                "dtype": "str",
                "default_factory": {
                  "expr": "lambda x: x['col2'].str.upper()"
                }
              },
              "col2": {
                "dtype": "str",
                "pattern": "bar|qux",
                "default": "<default>"
              }
            }
          }
        },
        "then": {
          "data": [
            {
              "col1": "foo",
              "col2": "bar",
              "errors": {}
            },
            {
              "col1": "QUX",
              "col2": "qux",
              "errors": {}
            },
            {
              "col1": "baz",
              "col2": "<default>",
              "errors": {}
            },
            {
              "col1": "<DEFAULT>",
              "col2": "<default>",
              "errors": {}
            }
          ]
        }
      },
      {
        "description": "Fill missing values with value from another column",
        "engines": [
          "pyspark"
        ],
        "given": {
          "data": [
            {
              "col1": "foo",
              "col2": "bar"
            },
            {
              "col1": null,
              "col2": "qux"
            },
            {
              "col1": "baz",
              "col2": null
            },
            {
              "col1": null,
              "col2": null
            }
          ]
        },
        "when": {
          "schema": {
            "columns": {
              "col1": {
                "dtype": "str",
                "default_factory": {
                  "expr": "lambda x: fn.upper(fn.col('col2'))"
                }
              },
              "col2": {
                "dtype": "str",
                "pattern": "bar|qux",
                "default": "<default>"
              }
            }
          }
        },
        "then": {
          "data": [
            {
              "col1": "foo",
              "col2": "bar",
              "errors": {}
            },
            {
              "col1": "QUX",
              "col2": "qux",
              "errors": {}
            },
            {
              "col1": "baz",
              "col2": "<default>",
              "errors": {}
            },
            {
              "col1": "<DEFAULT>",
              "col2": "<default>",
              "errors": {}
            }
          ]
        }
      }
    ]
  }
]
