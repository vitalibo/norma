[
  {
    "description": "cast(null as boolean) => null",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": null
        }
      ],
      "schema": {
        "pandas": {
          "col": "string[python]"
        },
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "void"
            }
          ],
          "type": "struct"
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('foo' as str) => 'foo'",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(123 as str) => '123'",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 123
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "123",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(123.45 as str) => '123.45'",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 123.45
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "123.45",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(true as str) => 'true'",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": true
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "true",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({'foo':'bar'} as str) => null, error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "foo": "bar"
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "string_type",
                  "msg": "Input should be a valid string"
                }
              ],
              "original": "{\"foo\":\"bar\"}"
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast([1] as str) => null, error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": [
            1
          ]
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "string_type",
                  "msg": "Input should be a valid string"
                }
              ],
              "original": "[1]"
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast(false, 123, '4.56', {'foo':'bar'}, ['foo'] as str) => ['false', '123', '4.56', null, null] error is raised",
    "engines": [
      "pandas"
    ],
    "given": {
      "data": [
        {
          "col": false
        },
        {
          "col": 123
        },
        {
          "col": 4.56
        },
        {
          "col": {
            "foo": "bar"
          }
        },
        {
          "col": [
            "foo"
          ]
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "false",
          "errors": {}
        },
        {
          "col": "123",
          "errors": {}
        },
        {
          "col": "4.56",
          "errors": {}
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "string_type",
                  "msg": "Input should be a valid string"
                }
              ],
              "original": "{\"foo\":\"bar\"}"
            }
          }
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "string_type",
                  "msg": "Input should be a valid string"
                }
              ],
              "original": "[\"foo\"]"
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast(null as string) => null",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          null,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "void"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    }
  },
  {
    "description": "cast('foo' as string) => 'foo'",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          "foo",
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    }
  },
  {
    "description": "cast(1 as string) => '1'",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          1,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "integer"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": "1",
          "col_bak": 1,
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          },
          {
            "name": "col_bak",
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "description": "cast(1.2 as string) => '1.2'",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          1.2,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "float"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": "1.2",
          "col_bak": 1.2,
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          },
          {
            "name": "col_bak",
            "type": "float"
          }
        ]
      }
    }
  },
  {
    "description": "cast(true as string) => 'true'",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          true,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": "true",
          "col_bak": true,
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          },
          {
            "name": "col_bak",
            "type": "boolean"
          }
        ]
      }
    }
  },
  {
    "description": "cast(null <string[python]> as string) => null",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": null
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        null
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast(123 <int32> as string) => '123'",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": 123
        }
      ],
      "dtype": "int32"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        "123"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast(123.45 <float32> as string) => '123.45'",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": 123.45
        }
      ],
      "dtype": "float32"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        "123.45"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast(true <boolean> as string) => 'true'",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": true
        }
      ],
      "dtype": "boolean"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        "true"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('foo' <string[python]> as string) => 'foo'",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        "foo"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('foo' <object> as string) => 'foo'",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ],
      "dtype": "object"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        "foo"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast({'foo':'bar'} <object> as string) => null, error is raised",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": {
            "foo": "bar"
          }
        }
      ],
      "dtype": "object"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        null
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          true
        ]
      },
      "errors": {
        "0": {
          "col": {
            "details": [
              {
                "type": "string_type",
                "msg": "Input should be a valid string"
              }
            ]
          }
        }
      }
    }
  }
]
