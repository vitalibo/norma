[
  {
    "description": "rule(col => col.startswith('f')), error is raised [vectorized]",
    "engines": [
      "pandas"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        },
        {
          "col": "bar"
        }
      ]
    },
    "when": {
      "schema": {
        "columns": {
          "col": {
            "dtype": "str",
            "rules": {
              "expr": "rules.rule(lambda df, column: ~df[column].str.startswith('f'), type='custom_error', msg='column must start with f')"
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors": {}
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "msg": "column must start with f",
                  "type": "custom_error"
                }
              ],
              "original": "\"bar\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "rule(col => col.startswith('f')), error is raised [vectorized]",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        },
        {
          "col": "bar"
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "string"
            }
          ],
          "type": "struct"
        }
      }
    },
    "when": {
      "schema": {
        "columns": {
          "col": {
            "dtype": "str",
            "rules": {
              "expr": "rules.rule(lambda column: ~fn.col(column).startswith('f'), details={'type':'custom_error', 'msg':'column must start with f'})"
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors": {}
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "msg": "column must start with f",
                  "type": "custom_error"
                }
              ],
              "original": "\"bar\""
            }
          }
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "string"
            },
            {
              "name": "errors",
              "nullable": false,
              "type": {
                "keyType": "string",
                "type": "map",
                "valueContainsNull": true,
                "valueType": {
                  "type": "struct",
                  "fields": [
                    {
                      "name": "details",
                      "nullable": false,
                      "type": {
                        "containsNull": true,
                        "type": "array",
                        "elementType": {
                          "type": "struct",
                          "fields": [
                            {
                              "name": "type",
                              "type": "string"
                            },
                            {
                              "name": "msg",
                              "type": "string"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "original",
                      "type": "string"
                    }
                  ]
                }
              }
            }
          ],
          "type": "struct"
        }
      }
    }
  },
  {
    "description": "rule(col => col == 'foo'), error is raised",
    "engines": [
      "pandas"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        },
        {
          "col": "bar"
        }
      ]
    },
    "when": {
      "schema": {
        "columns": {
          "col": {
            "dtype": "str",
            "rules": {
              "expr": "rules.rule(lambda df, col, error_state: error_state.add_errors(df[col] != 'foo', col, details={'type': 'custom_error', 'msg': 'column must equal foo'}))"
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors": {}
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "msg": "column must equal foo",
                  "type": "custom_error"
                }
              ],
              "original": "\"bar\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "rule(col => col == 'foo'), error is raised",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        },
        {
          "col": "bar"
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "string"
            }
          ],
          "type": "struct"
        }
      }
    },
    "when": {
      "schema": {
        "columns": {
          "col": {
            "dtype": "str",
            "rules": {
              "expr": "rules.rule(lambda df, col, error_state: df.transform(error_state.add_errors(fn.col(col) != 'foo', col, details={'type': 'custom_error', 'msg': 'column must equal foo'})))"
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors": {}
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "msg": "column must equal foo",
                  "type": "custom_error"
                }
              ],
              "original": "\"bar\""
            }
          }
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "string"
            },
            {
              "name": "errors",
              "nullable": false,
              "type": {
                "keyType": "string",
                "type": "map",
                "valueContainsNull": true,
                "valueType": {
                  "type": "struct",
                  "fields": [
                    {
                      "name": "details",
                      "nullable": false,
                      "type": {
                        "containsNull": true,
                        "type": "array",
                        "elementType": {
                          "type": "struct",
                          "fields": [
                            {
                              "name": "type",
                              "type": "string"
                            },
                            {
                              "name": "msg",
                              "type": "string"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "original",
                      "type": "string"
                    }
                  ]
                }
              }
            }
          ],
          "type": "struct"
        }
      }
    }
  }
]
