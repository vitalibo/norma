[
  {
    "description": "column is null, ignored",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": null
        }
      ],
      "schema": {
        "pandas": {
          "col": "string[python]"
        },
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "string"
            }
          ],
          "type": "struct"
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "enum": [
              "foo",
              "bar",
              "baz"
            ]
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'foo' in ['foo', 'bar', 'baz']",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "enum": [
              "foo",
              "bar",
              "baz"
            ]
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'bar' in ['foo', 'bar', 'baz']",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "bar"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "enum": [
              "foo",
              "bar",
              "baz"
            ]
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "bar",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'qux' in ['foo', 'bar', 'baz'], error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "qux"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "enum": [
              "foo",
              "bar",
              "baz"
            ]
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "enum",
                  "msg": "Input should be \"foo\", \"bar\" or \"baz\""
                }
              ],
              "original": "\"qux\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "123 in ['foo', 'bar', 'baz'], error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 123
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "integer",
            "enum": [
              "foo",
              "bar",
              "baz"
            ]
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "enum",
                  "msg": "Input should be \"foo\", \"bar\" or \"baz\""
                }
              ],
              "original": "123"
            }
          }
        }
      ]
    }
  },
  {
    "description": "'FOO' in ['foo', 'bar', 'baz'], error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "FOO"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "enum": [
              "foo",
              "bar",
              "baz"
            ]
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "enum",
                  "msg": "Input should be \"foo\", \"bar\" or \"baz\""
                }
              ],
              "original": "\"FOO\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "'foo' in 123, exception is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "enum": 123
          }
        }
      }
    },
    "then": {
      "raises": {
        "type": "ValueError",
        "match": "values must be a list, tuple, or set"
      }
    }
  },
  {
    "description": "'foo' in null, exception is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "schema": {
        "columns": {
          "col": {
            "dtype": "str",
            "rules": {
              "expr": "rules.isin(None)"
            }
          }
        }
      }
    },
    "then": {
      "raises": {
        "type": "ValueError",
        "match": "values must be a list, tuple, or set"
      }
    }
  }
]
