[
  {
    "description": "column is null, ignored",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": null
        }
      ],
      "schema": {
        "pandas": {
          "col": "string[python]"
        },
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "void"
            }
          ],
          "type": "struct"
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "not": {
              "enum": [
                "foo",
                "bar",
                "baz"
              ]
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'qux' not in ['foo', 'bar', 'baz']",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "qux"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "not": {
              "enum": [
                "foo",
                "bar",
                "baz"
              ]
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "qux",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'bar' not in ['foo', 'bar', 'baz'], error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "bar"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "not": {
              "enum": [
                "foo",
                "bar",
                "baz"
              ]
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "not_enum",
                  "msg": "Input should not be \"foo\", \"bar\" or \"baz\""
                }
              ],
              "original": "\"bar\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "123 not in ['foo', 'bar', 'baz']",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 123
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "integer",
            "not": {
              "enum": [
                "foo",
                "bar",
                "baz"
              ]
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": 123,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'FOO' not in ['foo', 'bar', 'baz']",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "FOO"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "not": {
              "enum": [
                "foo",
                "bar",
                "baz"
              ]
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": "FOO",
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "'foo' not in 123, exception is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string",
            "not": {
              "enum": 123
            }
          }
        }
      }
    },
    "then": {
      "raises": {
        "type": "ValueError",
        "match": "values must be a list, tuple, or set"
      }
    }
  },
  {
    "description": "'foo' not in null, exception is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "schema": {
        "columns": {
          "col": {
            "dtype": "str",
            "rules": {
              "expr": "rules.notin(None)"
            }
          }
        }
      }
    },
    "then": {
      "raises": {
        "type": "ValueError",
        "match": "values must be a list, tuple, or set"
      }
    }
  },
  {
    "description": "'foo' is in ['foo', 'bar'], error is raised",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          "foo",
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {
        "values": [
          "foo",
          "bar"
        ]
      }
    },
    "then": {
      "data": [
        {
          "col": "foo",
          "errors_col": [
            {
              "type": "not_enum",
              "msg": "Input should not be \"foo\" or \"bar\""
            }
          ]
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": {
                "fields": [
                  {
                    "name": "type",
                    "type": "string"
                  },
                  {
                    "name": "msg",
                    "type": "string"
                  }
                ],
                "type": "struct"
              },
              "containsNull": true
            }
          }
        ]
      }
    }
  },
  {
    "description": "'baz' is not in ['foo', 'bar']",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          "baz",
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {
        "values": [
          "foo",
          "bar"
        ]
      }
    },
    "then": {
      "data": [
        {
          "col": "baz",
          "errors_col": [
            null
          ]
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": {
                "fields": [
                  {
                    "name": "type",
                    "type": "string"
                  },
                  {
                    "name": "msg",
                    "type": "string"
                  }
                ],
                "type": "struct"
              },
              "containsNull": true
            }
          }
        ]
      }
    }
  },
  {
    "description": "'foo' is not in ['foo', 'bar'], error is raised",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {
        "values": [
          "foo",
          "bar"
        ]
      }
    },
    "then": {
      "data": [
        "foo"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          true
        ]
      },
      "errors": {
        "0": {
          "col": {
            "details": [
              {
                "type": "not_enum",
                "msg": "Input should not be \"foo\" or \"bar\""
              }
            ]
          }
        }
      }
    }
  },
  {
    "description": "'baz' is in ['foo', 'bar']",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "baz"
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {
        "values": [
          "foo",
          "bar"
        ]
      }
    },
    "then": {
      "data": [
        "baz"
      ],
      "dtype": "string[python]",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "{col={col1=null}}, ignored",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": null
          }
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": {
                "fields": [
                  {
                    "name": "col1",
                    "type": "string"
                  }
                ],
                "type": "struct"
              }
            }
          ]
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "string",
                "not": {
                  "enum": [
                    "foo",
                    "bar",
                    "baz"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": null
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "{col={col1='qux'}} not in ['foo', 'bar', 'baz']",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": "qux"
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "string",
                "not": {
                  "enum": [
                    "foo",
                    "bar",
                    "baz"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": "qux"
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "{col={col1='bar'}} not in ['foo', 'bar', 'baz'], error is raised",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": "bar"
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "string",
                "not": {
                  "enum": [
                    "foo",
                    "bar",
                    "baz"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": null
          },
          "errors": {
            "col.col1": {
              "details": [
                {
                  "type": "not_enum",
                  "msg": "Input should not be \"foo\", \"bar\" or \"baz\""
                }
              ],
              "original": "\"bar\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "each([3, 4]) not in [1, 2]",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": [
                3,
                4
              ]
            }
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "not": {
                        "enum": [
                          1,
                          2
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": [
                3,
                4
              ]
            }
          },
          "errors": {
          }
        }
      ]
    }
  },
  {
    "description": "each([1, 4, 2, 3]) not in [4, 2], error is raised",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": [
                1,
                4,
                2,
                3
              ]
            }
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "not": {
                        "enum": [
                          4,
                          2
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": [
                1,
                null,
                null,
                3
              ]
            }
          },
          "errors": {
            "col.col1.col2[]": {
              "details": [
                {
                  "loc": [
                    1,
                    2
                  ],
                  "msg": "Input should not be 4 or 2",
                  "type": "not_enum"
                }
              ],
              "original": "[1,4,2,3]"
            }
          }
        }
      ]
    }
  }
]
