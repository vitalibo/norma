[
  {
    "description": "cast(null as boolean) => null",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": null
        }
      ],
      "schema": {
        "pandas": {
          "col": "string[python]"
        },
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": "void"
            }
          ],
          "type": "struct"
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(true as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": true
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(false as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": false
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('true' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "true"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('True' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "True"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('t' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "t"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('yes' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "yes"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('y' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "y"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('on' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "on"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('1' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "1"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('false' as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "false"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('f' as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "f"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('no' as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "no"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('n' as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "n"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('off' as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "off"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('0' as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "0"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(1 as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 1
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(123 as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 123
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(0 as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 0
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(1.23 as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 1.23
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(0.123 as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 0.123
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast(0.0 as boolean) => false",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": 0.0
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": false,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast('foo' as boolean) => null, error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "bool_parsing",
                  "msg": "Input should be a valid boolean, unable to interpret input"
                }
              ],
              "original": "\"foo\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast(' on  ' as boolean) => true",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": " on  "
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({'foo': 'bar'} as boolean) => null, error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "foo": "bar"
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "bool_type",
                  "msg": "Input should be a valid boolean"
                }
              ],
              "original": "{\"foo\":\"bar\"}"
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast([true] as boolean) => null, error is raised",
    "engines": [
      "pandas",
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": [
            true
          ]
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "bool_type",
                  "msg": "Input should be a valid boolean"
                }
              ],
              "original": "[true]"
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast(true, '1', 'f', {'foo':'bar'}, 'foo' as boolean) => [true, true, false, null, null] error is raised",
    "engines": [
      "pandas"
    ],
    "given": {
      "data": [
        {
          "col": true
        },
        {
          "col": "1"
        },
        {
          "col": "f"
        },
        {
          "col": {
            "foo": "bar"
          }
        },
        {
          "col": "foo"
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "boolean"
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors": {}
        },
        {
          "col": true,
          "errors": {}
        },
        {
          "col": false,
          "errors": {}
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "bool_type",
                  "msg": "Input should be a valid boolean"
                }
              ],
              "original": "{\"foo\":\"bar\"}"
            }
          }
        },
        {
          "col": null,
          "errors": {
            "col": {
              "details": [
                {
                  "type": "bool_parsing",
                  "msg": "Input should be a valid boolean, unable to interpret input"
                }
              ],
              "original": "\"foo\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast(null as boolean) => null",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          null,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "void"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": null,
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    }
  },
  {
    "description": "cast('true' as boolean) => true",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          "true",
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": true,
          "col_bak": "true",
          "errors_col": [
            null
          ]
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": {
                "fields": [
                  {
                    "name": "type",
                    "type": "string"
                  },
                  {
                    "name": "msg",
                    "type": "string"
                  }
                ],
                "type": "struct"
              },
              "containsNull": true
            }
          },
          {
            "name": "col_bak",
            "type": "string"
          }
        ]
      }
    }
  },
  {
    "description": "cast(1 as boolean) => true",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          1,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "integer"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": true,
          "col_bak": 1,
          "errors_col": [
            null
          ]
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": {
                "fields": [
                  {
                    "name": "type",
                    "type": "string"
                  },
                  {
                    "name": "msg",
                    "type": "string"
                  }
                ],
                "type": "struct"
              },
              "containsNull": true
            }
          },
          {
            "name": "col_bak",
            "type": "integer"
          }
        ]
      }
    }
  },
  {
    "description": "cast(true as boolean) => true",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          true,
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": true,
          "errors_col": []
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    }
  },
  {
    "description": "cast('foo' as boolean) => null, error is raised",
    "engines": [
      "pyspark_api"
    ],
    "given": {
      "data": [
        [
          "foo",
          []
        ]
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "string"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": "void",
              "containsNull": false
            }
          }
        ]
      }
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        {
          "col": null,
          "col_bak": "foo",
          "errors_col": [
            {
              "type": "bool_parsing",
              "msg": "Input should be a valid boolean, unable to interpret input"
            }
          ]
        }
      ],
      "schema": {
        "fields": [
          {
            "name": "col",
            "type": "boolean"
          },
          {
            "name": "errors_col",
            "type": {
              "type": "array",
              "elementType": {
                "fields": [
                  {
                    "name": "type",
                    "type": "string"
                  },
                  {
                    "name": "msg",
                    "type": "string"
                  }
                ],
                "type": "struct"
              },
              "containsNull": true
            }
          },
          {
            "name": "col_bak",
            "type": "string"
          }
        ]
      }
    }
  },
  {
    "description": "cast(null <boolean> as boolean) => null",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": null
        }
      ],
      "dtype": "boolean"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        null
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast(true <bool> as boolean) => true",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": true
        }
      ],
      "dtype": "bool"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        true
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast(123 <Int32> as boolean) => true",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": 123
        }
      ],
      "dtype": "Int32"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        true
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('True' <string[python]> as boolean) => true",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "True"
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        true
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('on' <string[python]> as boolean) => true",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "on"
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        true
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('True' <object> as boolean) => true",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "True"
        }
      ],
      "dtype": "object"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        true
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('on' <object> as boolean) => true",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "on"
        }
      ],
      "dtype": "object"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        true
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          false
        ]
      },
      "errors": {
      }
    }
  },
  {
    "description": "cast('foo' <string[python]> as boolean) => null, error is raised",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "bar"
        }
      ],
      "dtype": "string[python]"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        null
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          true
        ]
      },
      "errors": {
        "0": {
          "col": {
            "details": [
              {
                "type": "bool_parsing",
                "msg": "Input should be a valid boolean, unable to interpret input"
              }
            ]
          }
        }
      }
    }
  },
  {
    "description": "cast('foo' <object> as boolean) => null, error is raised",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": "bar"
        }
      ],
      "dtype": "object"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        null
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          true
        ]
      },
      "errors": {
        "0": {
          "col": {
            "details": [
              {
                "type": "bool_parsing",
                "msg": "Input should be a valid boolean, unable to interpret input"
              }
            ]
          }
        }
      }
    }
  },
  {
    "description": "cast({'foo':'bar'} <object> as boolean) => null, error is raised",
    "engines": [
      "pandas_api"
    ],
    "given": {
      "data": [
        {
          "col": {
            "foo": "bar"
          }
        }
      ],
      "dtype": "object"
    },
    "when": {
      "args": {}
    },
    "then": {
      "data": [
        null
      ],
      "dtype": "boolean",
      "masks": {
        "col": [
          true
        ]
      },
      "errors": {
        "0": {
          "col": {
            "details": [
              {
                "type": "bool_type",
                "msg": "Input should be a valid boolean"
              }
            ]
          }
        }
      }
    }
  },
  {
    "description": "cast({col={col1=null}} as struct<bool>) => {col={col1=null}}",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": null
          }
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": {
                "fields": [
                  {
                    "name": "col1",
                    "type": "string"
                  }
                ],
                "type": "struct"
              }
            }
          ]
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": null
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({col={col1='true'}} as struct<bool>) => {col={col1=true}}",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": "true"
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": true
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({col={col1='abc'}} as struct<bool>) => {col={col1=null}}, error is raised",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": "abc"
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": null
          },
          "errors": {
            "col.col1": {
              "details": [
                {
                  "msg": "Input should be a valid boolean, unable to interpret input",
                  "type": "bool_parsing"
                }
              ],
              "original": "\"abc\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast({col={col1={col2=null}} as struct<bool>) => {col={col1={col2=null}}}",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": null
            }
          }
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": {
                "fields": [
                  {
                    "name": "col1",
                    "type": {
                      "fields": [
                        {
                          "name": "col2",
                          "type": "string"
                        }
                      ],
                      "type": "struct"
                    }
                  }
                ],
                "type": "struct"
              }
            }
          ]
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": null
            }
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({col={col1={col2='on'}} as struct<bool>) => {col={col1={col2=true}}}",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": "on"
            }
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": true
            }
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({col={col1={col2='abc'}} as struct<bool>) => {col={col1={col2=null}}}, error is raised",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": "abc"
            }
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": null
            }
          },
          "errors": {
            "col.col1.col2": {
              "details": [
                {
                  "msg": "Input should be a valid boolean, unable to interpret input",
                  "type": "bool_parsing"
                }
              ],
              "original": "\"abc\""
            }
          }
        }
      ]
    }
  },
  {
    "description": "cast({col={col1={col2={col3=null}}} as struct<bool>) => {col={col1={col2=col3=null}}}",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": {
                "col3": null
              }
            }
          }
        }
      ],
      "schema": {
        "pyspark": {
          "fields": [
            {
              "name": "col",
              "type": {
                "fields": [
                  {
                    "name": "col1",
                    "type": {
                      "fields": [
                        {
                          "name": "col2",
                          "type": {
                            "fields": [
                              {
                                "name": "col3",
                                "type": "string"
                              }
                            ],
                            "type": "struct"
                          }
                        }
                      ],
                      "type": "struct"
                    }
                  }
                ],
                "type": "struct"
              }
            }
          ]
        }
      }
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "object",
                    "properties": {
                      "col3": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": {
                "col3": null
              }
            }
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({col={col1={col2={col3='off'}}} as struct<bool>) => {col={col1={col2={col3=false}}}}",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": {
                "col3": "off"
              }
            }
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "object",
                    "properties": {
                      "col3": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": {
                "col3": false
              }
            }
          },
          "errors": {}
        }
      ]
    }
  },
  {
    "description": "cast({col={col1={col2={col3='abc'}}} as struct<bool>) => {col={col1={col2={col3=null}}}}, error is raised",
    "engines": [
      "pyspark"
    ],
    "given": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": {
                "col3": "abc"
              }
            }
          }
        }
      ]
    },
    "when": {
      "json_schema": {
        "type": "object",
        "properties": {
          "col": {
            "type": "object",
            "properties": {
              "col1": {
                "type": "object",
                "properties": {
                  "col2": {
                    "type": "object",
                    "properties": {
                      "col3": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "then": {
      "data": [
        {
          "col": {
            "col1": {
              "col2": {
                "col3": null
              }
            }
          },
          "errors": {
            "col.col1.col2.col3": {
              "details": [
                {
                  "msg": "Input should be a valid boolean, unable to interpret input",
                  "type": "bool_parsing"
                }
              ],
              "original": "\"abc\""
            }
          }
        }
      ]
    }
  }
]
